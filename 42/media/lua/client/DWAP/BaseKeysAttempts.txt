
-- local keysToSpawn = nil
-- local mapsToSpawn = nil

-- --- Get the key ID from whatever door we find on the square
-- --- @param square IsoGridSquare
-- --- @return number
-- local function getKeyIdFromGridSquare(square)
--     if not square then return -1 end
--     local objects = square:getObjects()
--     for i = 0, objects:size() - 1 do
--         local object = objects:get(i)
--         if object then
--             if instanceof(object, "IsoDoor") then
--                 return object:checkKeyId()
--             elseif instanceof(object, "IsoThumpable") then
--                 return object:getKeyId()
--             end
--         end
--     end
--     return -1
-- end

--- Get the key items from the player's inventory
--- @param inventory ItemContainer
--- @return table
-- DWAPKeysCL.getKeys = function(inventory, depth)
--     local keyItems = {}
--     for i = 0, inventory:getItems():size() - 1 do
--         --- @type InventoryItem
--         local item = inventory:getItems():get(i)
--         local itemType = item:getType() or "nil"
--         if item and itemType == "Key1" then
--             table.insert(keyItems, item)
--         elseif depth > 0 and item and item:IsInventoryContainer() then
--             DWAPUtils.dprint("Container:")
--             local containerKeys = DWAPKeysCL.getKeys(item:getInventory(), depth - 1)
--             for j = 1, #containerKeys do
--                 table.insert(keyItems, containerKeys[j])
--             end
--         end
--     end
--     return keyItems
-- end


-- DWAPKeysCL.maybeUpdatePlayerKey = function()
--     DWAPUtils.dprint("maybeUpdatePlayerKey")
--     local player = getPlayer()
--     if not player then return end
--     --- @type ItemContainer
--     local inventory = player:getInventory()
--     local keyItems = DWAPKeysCL.getKeys(inventory, 1)
--     DWAPUtils.dprint("Key items:")
--     for i = 1, #keyItems do
--         local config = keyItems[i]:getModData().pendingKey
--         if config then
--             local square = getCell():getGridSquare(config.x, config.y, config.z)
--             if square then
--                 local keyItem = keyItems[i]
--                 keyItem:setKeyId(getKeyIdFromGridSquare(square))
--                 keyItem:getModData().pendingKey = nil
--                 local coord_key = ("%d_%d"):format(config.x, config.y)
--                 keysToSpawn[coord_key] = nil
--                 DWAPUtils.dprint(("Key ID set to %d"):format(keyItem:getKeyId()))
--             end
--         end
--     end
-- end

-- {coords = {x = doorKey.x, y = doorKey.y, z = doorKey.z}, keyId = key:getKeyId()}
-- DWAP_UnsyncedKeys = DWAP_UnsyncedKeys or {}
-- Events.OnInitGlobalModData.Add(function()
--     if not isMultiplayer() then
--         DWAP_UnsyncedKeys = ModData.getOrCreate("DWAP_UnsyncedKeys")
--     end
-- end)

DWAPKeysCL.updateBuildingKeyId = function(params)
    DWAPUtils.dprint("updateBuildingKeyId")
    local coords = params.coords
    local keyId = params.keyId
    local square = getCell():getGridSquare(coords.x, coords.y, coords.z)
    if not square then return end
    local building = square:getBuilding()
    if building then
        local def = building:getDef()
        if def and def:getKeyId() ~= keyId then
            def:setKeyId(keyId)
            def:setKeySpawned(def:getKeySpawned() + 1)
            DWAPUtils.dprint(("Updated building key ID to %d"):format(keyId))
        end
    end
end

-- local function registerEvents(data)
--     if data then
--         for i = 1, #data do
--             DWAPSquareLoaded:AddEvent(
--                 DWAPKeysCL.updateBuildingKeyId,
--                 data[i].coords.x,
--                 data[i].coords.y,
--                 data[i].coords.z,
--                 true,
--                 {
--                     index = i,
--                     coords = data[i].coords,
--                     keyId = data[i].keyId
--                 }
--             )
--         end
--     end
-- end

-- Events.OnReceiveGlobalModData.Add(function(modDataName, data)
--     DWAPUtils.dprint(("OnReceiveGlobalModData %s"):format(modDataName))
--     if modDataName == "DWAP_UnsyncedKeys" then
--         DWAP_UnsyncedKeys = data
--         registerEvents(DWAP_UnsyncedKeys)
--     end
-- end)

-- Events.OnLoad.Add(function()
--     -- if mapsToSpawn then
--     --     for i = 1, #mapsToSpawn do
--     --         local stash = StashSystem.getStash(mapsToSpawn[i])
--     --         if stash then
--     --             local map = instanceItem(stash:getItem())
--     --             StashSystem.doStashItem(stash, map)
--     --             getPlayer():getInventory():AddItem(map)
--     --             DWAPUtils.dprint(("Added map %s to player inventory"):format(map:getDisplayName()))
--     --         end
--     --     end
--     --     mapsToSpawn = nil
--     -- end
--     DWAPUtils.dprint("OnLoad DWAPKeysCL")
--     if isMultiplayer() then
--         ModData.request("DWAP_UnsyncedKeys")
--     else
--         DWAP_UnsyncedKeys = ModData.get("DWAP_UnsyncedKeys")
--         registerEvents(DWAP_UnsyncedKeys)
--     end
-- end)

-- Events.OnInitWorld.Add(function()
--     DWAPUtils.dprint("OnInitWorld")
--     ModData.request("DWAP_UnsyncedKeys")
-- end)